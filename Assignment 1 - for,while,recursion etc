//FOR LOOP
//for loop is used to execute a specific part of code limited number of times.Below is the program to demonstrate for loop.Suppose we have to print numbers 1 to 10.
#include<iostream>

using namespace std;

int main(){
    for(int i = 1;i<=10;i++){
        cout<<i<<endl;
    }
    return 0;
 }
   
// WHILE LOOP
// While loop runs as long as the specified condition returns true. Suppose we have to write above program using while loop.
#include<iostream>

using namespace std;

int main(){
    int i = 1;
    while(i<=10){
    cout<<i<<endl;
    i++;
    }
    return 0;
}


//CONTINUE STATEMENT
//continue statement is used if we want to skip a particular part or we can say that it ends current iteration of the loop if the specified condition is true.
//Suppose in the above program if we dont want to print 4 then we have to use continue statement.
#include<iostream>

using namespace std;

int main(){
     int i = 1;
   for(int i = 1;i<=10;i++){
    if(i == 4){
       continue;
    }
    cout<<i<<endl;
 
    }
    return 0;
}
//The above program prints 1 to 10 except 4.

//IF ELSE STATEMENT
//if statement is used to check a particular condition and it runs when specified condition is true.If we want to check that if this statement is false, then other statement is true then we have to use  if else statement.
//We are going to check whether a number is even or not:
#include<iostream>

using namespace std;

int main(){
    int n  = 25;
    if(n % 2 == 0){        // % is mod operator used to return remainder
       cout<< "even";
    }else{
        cout<<"odd";
    }
    return 0;
}
// output is odd as 25 is odd number.

//SWITCH STATEMENT
//switch statement allows us to evaluates an expression and allows us to match it with different possible cases.
#include<iostream>

using namespace std;

int main(){
    int n  = 25;
    switch(n){
         case(10):
            cout<<"number is 10";
            break;                      // Break statement allows us to jump out of the loop. If we dont apply break statement here then default statement executed always.
          case(4):
            cout<<"number is 4";
            break;  
        case(25):
            cout<<"number is 25 ";
            break;
        default:                  // If value of n doesnt match with different cases above default case, then default case is executed.
             cout<<"not found";
    return 0;
    }
}
// output is = number is 25

// RECURSION
// In simple words, a function that calls itself is known as a recursive function. It has a base case.Suppose if we have to find factorial of  number , then we can use recursion.

#include<iostream>

using namespace std;

int findFact(int n){
   if(n == 0){
      return 1 ;
   }
   int prod = n * findFact(n-1);
   return prod;
   
}

int main(){
    int n = 4;
    
    cout<<findFact(n);
    return 0;
}
//output is 24

// BINARY SEARCH TREE (BST)
//Binary search tree allows us to maintain a solrted list of numbers.It is also known as ordered or sorted tree. Its properties are:
//i) Left node is always lesser than its parent.
//ii) Right node is always greater than its parent.
//  I am writing the code for building a binary search tree.

#include<iostream>
#include<queue>
using namespace std;

class Node{
public:
	int data;
	Node* left;
	Node* right;

	Node(int d){
		this->data = d;
		this->left  = NULL;
		this->right = NULL;
	}

};
void levelordertraversal(Node* root){
	queue<Node*> q;
	q.push(root);
	q.push(NULL);
	while(!q.empty()){
		Node* temp = q.front();
		q.pop();
		if(temp == NULL){
			cout<<endl;
			if(!q.empty()){
				q.push(NULL);
			}
		}else{
			cout<<temp->data<<" ";
		if(temp->left){
			q.push(temp->left);
		}
	   if(temp->right){
			q.push(temp->right);
		}
	}

	}
}

Node* insertIntobst(Node* root,int d){
	//base case
	if(root == NULL){
		root = new Node(d);
		return root;
	}
	if(d > root->data){
		root->right = insertIntobst(root->right,d);
	}else{
        root->left = insertIntobst(root->left,d);
	}
	return root;
}

void takeInput(Node* &root){
	int data;
	cin>>data;
	while(data!=-1){
		root = insertIntobst(root,data);
		cin>>data;
	}
}
int main(){
    Node *root = NULL;

    takeInput(root);
    levelordertraversal(root);
}
*/ If input is 10 8 77 6 55 4 -1
  then output is 
 10
8 77
6 55
4 
/*
// CLOSURE
In simple words, closure is a technique in programming that allows us to access the out of scope variable.It is mainly used in javascript.
Its example:

first = function() {
  var x = 1;
  var second = function() {
    console.log(x);
  }
  return second; 
}

var b = first(); 
b();
 
